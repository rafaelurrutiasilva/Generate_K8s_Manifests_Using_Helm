---
# Source: argo-cd/templates/repo-server/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argo-cd-repo-server
  namespace: "argo-cd"
  labels:
    app.kubernetes.io/name: argo-cd
    helm.sh/chart: argo-cd-4.5.2
    app.kubernetes.io/instance: argo-cd
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: repo-server
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: argo-cd
      app.kubernetes.io/instance: argo-cd
      app.kubernetes.io/component: repo-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: argo-cd
        helm.sh/chart: argo-cd-4.5.2
        app.kubernetes.io/instance: argo-cd
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: repo-server
    spec:
      serviceAccountName: argo-cd-argocd-repo-server
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: argo-cd
                    app.kubernetes.io/instance: argo-cd
                    app.kubernetes.io/component: repo-server
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      initContainers:
        - name: wait-for-redis
          image: harbor.example.org/public/bitnami/redis:7.0.10
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
          args:
            - -ec
            - |
                #!/bin/bash

                set -o errexit
                set -o nounset
                set -o pipefail

                . /opt/bitnami/scripts/libos.sh
                . /opt/bitnami/scripts/liblog.sh

                check_redis_connection() {
                  local result="$(redis-cli -h argo-cd-redis-master -p 6379  PING)"
                  if [[ "$result" != "PONG" ]]; then
                    false
                  fi
                }

                info "Checking redis connection..."
                if ! retry_while "check_redis_connection"; then
                    error "Could not connect to the Redis server"
                    return 1
                else
                    info "Connected to the Redis instance"
                fi
          env:
            - name: REDISCLI_AUTH
              valueFrom:
                secretKeyRef:
                  name: argo-cd-redis
                  key: redis-password
      containers:
        - name: argocd-repo-server
          image: harbor.example.org/internal/bitnami/argo-cd:2.6.7
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - all
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1001
          args:
            - argocd-repo-server
            - --logformat
            - "text"
            - --loglevel
            - "info"
            - --redis
            - argo-cd-redis-master:6379
          ports:
            - name: repo-server
              containerPort: 8081
              protocol: TCP
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: argo-cd-redis
                  key: redis-password
          envFrom:
          resources:
            limits: {}
            requests: {}
          livenessProbe:
            tcpSocket:
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          volumeMounts:
            # Mounting into a path that will be read by Argo CD
            # Ref: https://argoproj.github.io/argo-cd/operator-manual/declarative-setup/#ssh-known-host-public-keys
            - name: ssh-known-hosts
              mountPath: /app/config/ssh
            # Mounting into a path that will be read by Argo CD.
            # This secret will be autogenerated by Argo CD repo server unless it already exists. Users can create its own certificate to override it.
            # Ref: https://argoproj.github.io/argo-cd/operator-manual/tls/#inbound-tls-certificates-used-by-argocd-repo-sever
            - mountPath: /app/config/server/tls
              name: argocd-repo-server-tls
            - mountPath: /app/config/gpg/keys
              name: gpg-keyring
            - mountPath: /tmp
              name: tmp-dir
      volumes:
        - name: ssh-known-hosts
          configMap:
            name: argocd-ssh-known-hosts-cm
        - name: argocd-repo-server-tls
          secret:
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
            optional: true
            secretName: argocd-repo-server-tls
        - emptyDir: {}
          name: tmp-dir
        - emptyDir: {}
          name: gpg-keyring
